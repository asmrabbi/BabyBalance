# -*- coding: utf-8 -*-
"""BabyBalanceV2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19wtjLD6vORO8Qkpmuy_Sljnls1j5CA7B
"""

"""
BabyBalance V2
--------------------------------------------------
Features:
1) Multi-baby tracking, for each users.
2) Role-based user accounts: normal, admin, superadmin.
3) Notifications: threaded reminders if interval>0.
4) Advanced analytics (mean, std) with optional age-based comments (DOB).
5) CSV/PDF monthly reports (PDF requires reportlab).

"""
"Installing Libraries"

!pip install reportlib
!pip install pandas
!pip install NumPy

import json
import os
import hashlib
import calendar
import csv
import time
import threading
from datetime import datetime, date

import numpy as np
import pandas as pd

# Optional PDF generation (ReportLab)
try:
    from reportlab.lib.pagesizes import A4
    from reportlab.pdfgen import canvas
    from reportlab.lib.units import cm
    PDF_ENABLED = True
except ImportError:
    PDF_ENABLED = False

DATA_FILE = "user_data.json"

SUPERADMIN_USERNAME = "superadmin"
SUPERADMIN_PASSWORD_HASH = hashlib.sha256("superadminpass".encode()).hexdigest()

IDEAL_FEEDING_RANGE = (2.5, 4.0)
IDEAL_SLEEP_RANGE   = (10.0, 12.0)
SOURCE_WEBSITE      = "https://www.aap.org/en-us"

notification_thread = None
stop_notification_signal = False

# References for guidelines
GUIDELINES_SOURCE = "American Academy of Pediatrics, CDC, Sleep Foundation"
LIFE_STAGE_INFO = {
    "Newborn (0-3 months)": {
        "sleep": "14–17 hours total sleep per day",
        "feeding": "8–12 feedings (~2–4 total hrs/day)",
    },
    "Infant (4-12 months)": {
        "sleep": "12–16 hours total sleep (including naps)",
        "feeding": "7–9 feedings (~2–4 total hrs/day)",
    },
    "Toddler (12-24 months)": {
        "sleep": "11–14 hours total sleep (including naps)",
        "feeding": "~2–3 hours total daily feeding sessions",
    }
}

# -------------------- Data Persistence --------------------
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=2)

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# -------------------- Notification Threading --------------------
def notification_worker(interval):
    global stop_notification_signal
    while not stop_notification_signal:
        time.sleep(interval * 60)
        if not stop_notification_signal:
            print(f"\n[NOTIFICATION] It's been {interval} minutes.")
            print("  - Consider reviewing baby data or adjusting feeding/sleep.\n")

def start_notifications(interval):
    global notification_thread, stop_notification_signal
    stop_notifications()
    stop_notification_signal = False
    notification_thread = threading.Thread(target=notification_worker, args=(interval,), daemon=True)
    notification_thread.start()

def stop_notifications():
    global stop_notification_signal, notification_thread
    stop_notification_signal = True
    if notification_thread and notification_thread.is_alive():
        notification_thread.join()
    notification_thread = None

# -------------------- Registration & Login --------------------
def register_user(data):
    username = input("Choose a username: ").strip()
    if username.lower() == SUPERADMIN_USERNAME.lower():
        print("Cannot register superadmin username.")
        return
    if username in data:
        print("Username already exists. Choose another.")
        return

    password = input("Choose a password: ")
    data[username] = {
        "password": hash_password(password),
        "babies": {},
        "notification_interval": 0
    }
    save_data(data)
    print(f"User '{username}' registered successfully!")

def login_user(data):
    username = input("Username: ").strip()
    password = input("Password: ")
    hashed   = hash_password(password)

    if username == SUPERADMIN_USERNAME:
        if hashed == SUPERADMIN_PASSWORD_HASH:
            print("Superadmin login successful!")
            return (username, True, True)
        else:
            print("Invalid superadmin password.")
            return (None, False, False)

    if username not in data:
        print("User does not exist.")
        return (None, False, False)

    if data[username]["password"] == hashed:
        print(f"Login successful! Welcome, {username}.")
        is_adm = data[username].get("is_admin", False)
        return (username, False, is_adm)
    else:
        print("Invalid password.")
        return (None, False, False)

def prompt_notification_interval(data, username):
    curr = data[username].get("notification_interval", 0)
    if curr>0:
        print(f"Current notification interval: {curr} minutes.")
    ans=input("Enter new notification interval (minutes, 0=disable): ")
    try:
        newv=int(ans)
    except ValueError:
        print("Invalid number, skipping.")
        return
    data[username]["notification_interval"]=newv
    save_data(data)
    if newv>0:
        print(f"Notification interval set to {newv} minutes.")
        start_notifications(newv)
    else:
        print("Notifications disabled.")
        stop_notifications()

def maybe_show_notification(data, username):
    if username not in data:
        return

# -------------------- Migrate Old Format => New Format --------------------
def ensure_new_format(babies_dict, baby_name):
    """
    If babies_dict[baby_name] is a list, convert it to:
      { "records": <that list>, "dob": None }
    """
    if isinstance(babies_dict[baby_name], list):
        old_list = babies_dict[baby_name]
        babies_dict[baby_name] = {
            "records": old_list,
            "dob": None
        }

# -------------------- DOB for Normal User's Own Baby --------------------
def set_baby_dob(data, username):
    """
    Normal user sets DOB for their own baby.
    """
    bname = select_baby(data, username)
    if not bname:
        return
    if bname not in data[username]["babies"]:
        print(f"Baby '{bname}' not found for user '{username}'.")
        return

    ensure_new_format(data[username]["babies"], bname)

    dob_str = input("Enter baby's DOB (YYYY-MM-DD): ").strip()
    try:
        datetime.strptime(dob_str, "%Y-%m-%d")
    except ValueError:
        print("Invalid DOB format. Must be YYYY-MM-DD.")
        return

    data[username]["babies"][bname]["dob"] = dob_str
    save_data(data)
    print(f"DOB set for baby '{bname}' under user '{username}' to {dob_str}.")

# -------------------- NEW: Admin/Superadmin Setting Another User’s Baby DOB --------------------
def superadmin_set_baby_dob(data):
    """
    Lets superadmin (or admin) pick any user, pick that user's baby, set DOB.
    Eliminates errors if superadmin has no babies, but wants to set someone else's baby DOB.
    """
    target_user = input("Enter the username whose baby's DOB you want to set: ").strip()
    if target_user not in data:
        print("No such user.")
        return

    if "babies" not in data[target_user] or not data[target_user]["babies"]:
        print(f"User '{target_user}' has no babies. Cannot set DOB.")
        return

    baby_list = list(data[target_user]["babies"].keys())
    print(f"Babies for user '{target_user}':")
    for i,bn in enumerate(baby_list, start=1):
        print(f"{i}) {bn}")
    c_str=input("Pick a baby number: ").strip()
    try:
        c=int(c_str)
        if c<1 or c>len(baby_list):
            print("Invalid choice.")
            return
    except ValueError:
        print("Invalid choice.")
        return

    bname = baby_list[c-1]
    ensure_new_format(data[target_user]["babies"], bname)

    dob_str = input(f"Enter baby's DOB (YYYY-MM-DD) for '{bname}' under user '{target_user}': ").strip()
    try:
        datetime.strptime(dob_str, "%Y-%m-%d")
    except ValueError:
        print("Invalid DOB format.")
        return

    data[target_user]["babies"][bname]["dob"] = dob_str
    save_data(data)
    print(f"DOB set for baby '{bname}' (User: {target_user}) to {dob_str}.")

# -------------------- Helper to pick baby's records --------------------
def select_baby(data, username):
    if "babies" not in data[username]:
        data[username]["babies"] = {}
    babies_dict = data[username]["babies"]
    if not babies_dict:
        print("No babies found. Let's create one.")
        new_b = input("Enter baby name: ").strip()
        if new_b:
            babies_dict[new_b] = {"records": [], "dob": None}
        return new_b
    else:
        baby_list = list(babies_dict.keys())
        print("\nBabies for this user:")
        for i,bn in enumerate(baby_list, start=1):
            print(f"{i}) {bn}")
        print(f"{len(baby_list)+1}) Create a new baby")
        c_str = input("Choice: ").strip()
        if not c_str.isdigit():
            print("Invalid choice.")
            return None
        c=int(c_str)
        if c<1 or c>(len(baby_list)+1):
            print("Invalid choice.")
            return None
        if c==(len(baby_list)+1):
            new_b=input("Enter new baby name: ").strip()
            if new_b and new_b not in babies_dict:
                babies_dict[new_b] = {"records": [], "dob": None}
            return new_b
        else:
            return baby_list[c-1]

def get_baby_records(data, username, bname):
    ensure_new_format(data[username]["babies"], bname)
    return data[username]["babies"][bname]["records"]

def set_baby_records(data, username, bname, records_list):
    ensure_new_format(data[username]["babies"], bname)
    data[username]["babies"][bname]["records"] = records_list
    save_data(data)

def calculate_age_in_months(dob_str):
    if not dob_str:
        return None
    try:
        dob = datetime.strptime(dob_str, "%Y-%m-%d").date()
    except ValueError:
        return None
    today = date.today()
    yrs = today.year - dob.year
    months = yrs*12 + (today.month - dob.month)
    if today.day < dob.day:
        months -= 1
    return max(months,0)

def get_life_stage_info(dob_str):
    months=calculate_age_in_months(dob_str)
    if months is None:
        return None
    if months<=3:
        stage="Newborn (0-3 months)"
    elif months<=12:
        stage="Infant (4-12 months)"
    elif months<=24:
        stage="Toddler (12-24 months)"
    else:
        return None

    rec_sleep=LIFE_STAGE_INFO[stage]["sleep"]
    rec_feed=LIFE_STAGE_INFO[stage]["feeding"]
    return (stage, rec_sleep, rec_feed)

def generate_comments(feeding, sleeping):
    # Compare to IDEAL ranges
    def analyze_interval(value, ideal_range):
        mn,mx=ideal_range
        if value<mn:
            return ("below", mn-value)
        elif value>mx:
            return ("above", value-mx)
        else:
            return ("within",0.0)

    fs, fd=analyze_interval(feeding, IDEAL_FEEDING_RANGE)
    ss, sd=analyze_interval(sleeping,IDEAL_SLEEP_RANGE)
    fmin,fmax=IDEAL_FEEDING_RANGE
    smin,smax=IDEAL_SLEEP_RANGE

    if fs=="below":
        fc=f"{fd:.1f}h below ideal ({fmin}-{fmax}h)."
    elif fs=="above":
        fc=f"{fd:.1f}h above ideal ({fmin}-{fmax}h)."
    else:
        fc=f"Within ideal ({fmin}-{fmax}h)."

    if ss=="below":
        sc=f"{sd:.1f}h below ideal ({smin}-{smax}h)."
    elif ss=="above":
        sc=f"{sd:.1f}h above ideal ({smin}-{smax}h)."
    else:
        sc=f"Within ideal ({smin}-{smax}h)."

    return fc, sc

def enter_baby_data(data, username):
    bname=select_baby(data, username)
    if not bname:
        return
    records=get_baby_records(data, username, bname)
    feeding=float(input("Enter feeding duration (hours): "))
    sleeping=float(input("Enter sleep duration (hours): "))
    d_str=input("Enter date (YYYY-MM-DD) (blank=today): ").strip()
    if not d_str:
        d_str=datetime.now().strftime("%Y-%m-%d")
    try:
        datetime.strptime(d_str, "%Y-%m-%d")
    except ValueError:
        print("Invalid date format.")
        return
    t_str=datetime.now().strftime("%H:%M:%S")
    entry={"date": d_str, "feeding": feeding, "sleep": sleeping, "timestamp": t_str}
    records.append(entry)
    set_baby_records(data, username, bname, records)
    print(f"Data saved for baby '{bname}'!")

def view_baby_data(data, username):
    bname=select_baby(data, username)
    if not bname:
        return
    records=get_baby_records(data, username, bname)
    if not records:
        print(f"No records for baby '{bname}'.")
        return
    df=pd.DataFrame(records)
    df['date']=pd.to_datetime(df['date'])
    daily_agg=df.groupby('date').agg({'feeding':'sum','sleep':'sum'}).reset_index()
    print(f"\n=== Baby Data for '{bname}' (User: {username}) ===\n")
    for _, row in daily_agg.iterrows():
        ds=row['date'].strftime("%Y-%m-%d")
        ft=row['feeding']
        sl=row['sleep']
        fc, sc=generate_comments(ft, sl)
        print(f"Date: {ds}")
        print(f"  -> Totals: Feeding={ft}h, Sleep={sl}h")
        print(f"  Feeding Comment: {fc}")
        print(f"  Sleep Comment:   {sc}")
        print(f"  (Source: {SOURCE_WEBSITE})\n")

def list_all_entries(data, username, bname):
    records=get_baby_records(data, username, bname)
    if not records:
        print(f"No records for baby '{bname}'.")
        return pd.DataFrame()
    df=pd.DataFrame(records)
    df['datetime']=pd.to_datetime(df['date']+" "+df['timestamp'])
    df=df.sort_values('datetime').reset_index(drop=True)
    print(f"\nAll Entries for baby '{bname}' (User: {username}):")
    for i,row in df.iterrows():
        print(f"{i+1}) {row['date']} at {row['timestamp']} -> "
              f"Feeding={row['feeding']}h, Sleep={row['sleep']}h")
    return df

def edit_entry(data, username):
    bname=select_baby(data, username)
    if not bname:
        return
    df=list_all_entries(data, username, bname)
    if df.empty:
        return
    c=input("Select entry # to edit (Enter=cancel): ").strip()
    if not c:
        print("Edit cancelled.")
        return
    try:
        idx=int(c)
    except ValueError:
        print("Invalid choice.")
        return
    if idx<1 or idx>len(df):
        print("Invalid entry #.")
        return
    row_index=idx-1
    nf=input("New Feeding (hrs) blank=unchanged: ")
    ns=input("New Sleep (hrs) blank=unchanged: ")
    nd=input("New Date (YYYY-MM-DD) blank=unchanged: ")
    if nf.strip():
        df.at[row_index,'feeding']=float(nf)
    if ns.strip():
        df.at[row_index,'sleep']=float(ns)
    if nd.strip():
        try:
            datetime.strptime(nd, "%Y-%m-%d")
            df.at[row_index,'date']=nd
        except ValueError:
            print("Invalid date, skipping update.")
    updated=df.drop(columns='datetime').to_dict(orient='records')
    set_baby_records(data, username, bname, updated)
    print("Entry updated successfully!")

def delete_entry(data, username):
    bname=select_baby(data, username)
    if not bname:
        return
    df=list_all_entries(data, username, bname)
    if df.empty:
        return
    c=input("Select entry # to delete (Enter=cancel): ").strip()
    if not c:
        print("Delete cancelled.")
        return
    try:
        idx=int(c)
    except ValueError:
        print("Invalid choice.")
        return
    if idx<1 or idx>len(df):
        print("Invalid entry #.")
        return
    df=df.drop(df.index[idx-1]).reset_index(drop=True)
    updated=df.drop(columns='datetime').to_dict(orient='records')
    set_baby_records(data, username, bname, updated)
    print("Entry deleted successfully!")

def view_month_calendar(data, username):
    bname=select_baby(data, username)
    if not bname:
        return
    records=get_baby_records(data, username, bname)
    if not records:
        print(f"No records for baby '{bname}'.")
        return
    ys=input("Year (YYYY): ")
    ms=input("Month (1-12): ")
    try:
        yr=int(ys)
        mo=int(ms)
    except ValueError:
        print("Invalid year/month.")
        return
    df=pd.DataFrame(records)
    df['date']=pd.to_datetime(df['date'])
    mask=(df['date'].dt.year==yr)&(df['date'].dt.month==mo)
    dfm=df[mask]
    if dfm.empty:
        print("No entries for that month.")
        return
    daily_agg=dfm.groupby(dfm['date'].dt.day).agg({'feeding':'sum','sleep':'sum'}).reset_index().rename(columns={'date':'day'})
    cal=calendar.monthcalendar(yr, mo)
    mname=calendar.month_name[mo]
    print(f"\n--- {mname} {yr} (Baby: {bname}) ---")
    headers=["Mo","Tu","We","Th","Fr","Sa","Su"]
    line=" ".join(f"{h:>4}" for h in headers)
    print(line)
    dset=set(int(row['day']) for _, row in daily_agg.iterrows())
    for week in cal:
        wstr=""
        for d in week:
            if d==0:
                wstr+="    "
            else:
                if d in dset:
                    wstr+=f"{str(d)+'*':>4}"
                else:
                    wstr+=f"{d:>4}"
        print(wstr)

    print("\n-- Data Summary --")
    for _, row in daily_agg.iterrows():
        dd=int(row['day'])
        fh=row['feeding']
        sh=row['sleep']
        print(f"Day {dd:>2}: Feeding={fh:.1f}h, Sleep={sh:.1f}h")

# -------------------- Updated Advanced Analytics --------------------
def advanced_analytics(data, username):
    bname=select_baby(data, username)
    if not bname:
        return

    babies_dict = data[username]["babies"]
    ensure_new_format(babies_dict, bname)
    baby_data = babies_dict[bname]
    records   = baby_data.get("records", [])
    dob_str   = baby_data.get("dob", None)

    if not records:
        print(f"No records for baby '{bname}'.")
        return

    df=pd.DataFrame(records)
    df['date']=pd.to_datetime(df['date'])
    daily_agg=df.groupby('date').agg({'feeding':'sum','sleep':'sum'}).reset_index()
    print(f"\n==== Advanced Analytics (Daily) for baby '{bname}' ====")
    if daily_agg.empty:
        print("No daily records.")
        return
    print(daily_agg.to_string(index=False))

    # Calculate mean & std
    feeding_mean = daily_agg['feeding'].mean()
    feeding_std  = daily_agg['feeding'].std()
    sleep_mean   = daily_agg['sleep'].mean()
    sleep_std    = daily_agg['sleep'].std()

    # Print daily feeding stats
    print(f"\nDaily Feeding Averages:")
    print(f"  Mean: {feeding_mean:.2f}h/day")
    print(f"  Std:  {feeding_std:.2f}h/day")
    print("    - A smaller std => more consistent day-to-day.")
    print("    - A larger std => bigger variation from the mean.")
    print("    (Rough: <0.5 => very consistent, ~1 => moderate, >1.5 => high)\n")

    # Print daily sleep stats
    print("Daily Sleep Averages:")
    print(f"  Mean: {sleep_mean:.2f}h/day")
    print(f"  Std:  {sleep_std:.2f}h/day")
    print("    - A smaller std => more consistent day-to-day.")
    print("    - A larger std => bigger variation from the mean.")
    print("    (Rough: <0.5 => very consistent, ~1 => moderate, >1.5 => high)\n")

    # Weekly grouping
    df['week']=df['date'].dt.isocalendar().week
    df['year']=df['date'].dt.year
    weekly_agg=df.groupby(['year','week']).agg({'feeding':'sum','sleep':'sum'}).reset_index()

    print("==== Advanced Analytics (Weekly) ====")
    if not weekly_agg.empty:
        print(weekly_agg.to_string(index=False))
    else:
        print("No weekly data aggregated, insufficient records.")

    # Check baby age => life-stage
    months=calculate_age_in_months(dob_str)
    if months is None:
        print("\nNo DOB => skipping life-stage guidelines.")
    else:
        if months>24:
            print("\nBaby is older than 24 months => skipping advanced age-based guidelines.")
        else:
            # within 0-24 months range => attempt to get stage info
            life_info=get_life_stage_info(dob_str)
            if life_info:
                stage, rec_sleep, rec_feed=life_info
                print(f"\nBased on DOB, baby is: {stage}")
                print(f"Recommended Sleep: {rec_sleep}")
                print(f"Recommended Feeding: {rec_feed}")
            else:
                # In case something else goes wrong
                print("\nCould not determine exact stage, but baby is <= 24 months. No guidelines available.")

    print(f"\nReferences:\n - {GUIDELINES_SOURCE}")
    print(" (These are approximate. Consult a pediatrician for personalized guidance.)")

def download_month_report(data, username):
    bname=select_baby(data, username)
    if not bname:
        return
    babies_dict=data[username]["babies"]
    ensure_new_format(babies_dict, bname)
    baby_data=babies_dict[bname]
    records=baby_data.get("records", [])

    if not records:
        print(f"No records for baby '{bname}'.")
        return

    ys=input("Enter year (YYYY): ").strip()
    ms=input("Enter month (1-12): ").strip()
    try:
        yr=int(ys)
        mo=int(ms)
    except ValueError:
        print("Invalid year or month.")
        return

    df=pd.DataFrame(records)
    df['date']=pd.to_datetime(df['date'])
    mask=(df['date'].dt.year==yr)&(df['date'].dt.month==mo)
    dfm=df[mask]
    if dfm.empty:
        print("No entries for that month/year.")
        return

    daily_agg=dfm.groupby(dfm['date'].dt.day).agg({'feeding':'sum','sleep':'sum'}).reset_index().rename(columns={'date':'day'})
    results=[]
    for _, row in daily_agg.iterrows():
        dday=row['day']
        ft=row['feeding']
        sl=row['sleep']
        fc, sc=generate_comments(ft, sl)
        results.append((dday, ft, fc, sl, sc))

    print("Select report format:")
    print("1) CSV")
    if PDF_ENABLED:
        print("2) PDF")
    ch=input("Choose: ").strip()
    base_name=f"{username}_{bname}_{yr}_{mo:02d}"

    if ch=="1":
        fname=base_name+".csv"
        with open(fname,'w',newline='',encoding='utf-8') as csvfile:
            w=csv.writer(csvfile)
            w.writerow(["Day","Feeding (hrs)","Feeding Comment","Sleep (hrs)","Sleep Comment","Source"])
            for (d,ft,fc,sl,sc) in results:
                w.writerow([d,ft,fc,sl,sc,SOURCE_WEBSITE])
        print(f"CSV report created: {fname}")
    elif ch=="2" and PDF_ENABLED:
        fname=base_name+".pdf"
        from reportlab.lib.pagesizes import A4
        from reportlab.pdfgen import canvas
        from reportlab.lib.units import cm

        c=canvas.Canvas(fname,pagesize=A4)
        c.setFont("Helvetica-Bold",16)
        c.drawString(2*cm,28.5*cm,"BabyBalance Monthly Report")

        c.setFont("Helvetica",11)
        c.drawString(2*cm,27.7*cm,"Data entered by the user; Admins do not alter or validate entries.")
        c.drawString(2*cm,27.0*cm,f"User: {username}, Baby: {bname}")
        c.drawString(2*cm,26.3*cm,f"Month: {calendar.month_name[mo]} {yr}")

        y=24.8*cm
        c.setFont("Helvetica-Bold",10)
        c.drawString(2*cm,y,"Day")
        c.drawString(3.5*cm,y,"Feeding (hrs)")
        c.drawString(6.5*cm,y,"Feeding Comment")
        c.drawString(11*cm,y,"Sleep (hrs)")
        c.drawString(14*cm,y,"Sleep Comment")
        c.setFont("Helvetica",9)
        for (day,ft,fc,sl,sc) in results:
            y-=0.8*cm
            c.drawString(2*cm,y,str(day))
            c.drawString(3.5*cm,y,f"{ft:.1f}")
            c.drawString(6.5*cm,y,fc)
            c.drawString(11*cm,y,f"{sl:.1f}")
            c.drawString(14*cm,y,sc)
            if y<3.5*cm:
                c.showPage()
                y=28*cm
                c.setFont("Helvetica-Bold",10)
                c.drawString(2*cm,y,"Day")
                c.drawString(3.5*cm,y,"Feeding (hrs)")
                c.drawString(6.5*cm,y,"Feeding Comment")
                c.drawString(11*cm,y,"Sleep (hrs)")
                c.drawString(14*cm,y,"Sleep Comment")
                c.setFont("Helvetica",9)

        y-=1.2*cm
        c.setFont("Helvetica-Oblique",9)
        disclaimers=[
            f"Ideal feeding/sleep intervals are from: {SOURCE_WEBSITE}.",
            "We do not provide medical advice or create these standards.",
            "All data is user-supplied; Admins do not modify entries.",
            "This report is for informational purposes only."
        ]
        for line in disclaimers:
            c.drawString(2*cm,y,line)
            y-=0.6*cm
        c.showPage()
        c.save()
        print(f"PDF report created: {fname}")
    else:
        print("Invalid choice or PDF not enabled. No report generated.")

# -------------------- Admin / Superadmin Tools --------------------
def admin_list_all_users(data):
    if not data:
        print("No users.")
        return
    print("\n=== List of Users ===")
    for u in data:
        adm=data[u].get("is_admin",False)
        print(f"- {u} {'(admin)' if adm else ''}")

def admin_view_user_data(data):
    uname=input("Username to view: ").strip()
    if uname not in data:
        print("No such user.")
        return
    view_baby_data(data, uname)

def admin_edit_data(data):
    uname=input("Username to edit: ").strip()
    if uname not in data:
        print("No such user.")
        return
    edit_entry(data, uname)

def admin_delete_data(data):
    uname=input("Username to remove an entry from: ").strip()
    if uname not in data:
        print("No such user.")
        return
    delete_entry(data, uname)

def admin_delete_user(data):
    uname=input("Username to delete entirely: ").strip()
    if uname not in data:
        print("No such user.")
        return
    c=input(f"Are you sure you want to delete '{uname}'? (y/n): ")
    if c.lower()=='y':
        del data[uname]
        save_data(data)
        print(f"User '{uname}' deleted.")
    else:
        print("Cancelled.")

def superadmin_create_new_admin(data):
    newadm=input("Username to promote/create as admin: ").strip()
    if newadm.lower()==SUPERADMIN_USERNAME.lower():
        print("Cannot use the reserved superadmin username again.")
        return
    if newadm not in data:
        print(f"'{newadm}' does not exist, creating as admin.")
        pw=input("Enter password for new admin: ")
        data[newadm]={
            "password":hash_password(pw),
            "is_admin":True,
            "babies":{},
            "notification_interval":0
        }
        save_data(data)
        print(f"New admin user '{newadm}' created.")
    else:
        data[newadm]["is_admin"]=True
        save_data(data)
        print(f"User '{newadm}' is now an admin.")

def superadmin_list_admins(data):
    print("\n=== List of Admins (excluding superadmin) ===")
    found=False
    for user in data:
        if user.lower()!=SUPERADMIN_USERNAME.lower() and data[user].get("is_admin",False):
            print(f" - {user}")
            found=True
    if not found:
        print("No other admins found.")

def superadmin_set_baby_dob(data):
    """
    Lets superadmin pick any user, pick baby, set DOB => no error if superadmin has no own babies.
    """
    target_user=input("Enter the username whose baby's DOB you want to set: ").strip()
    if target_user not in data:
        print("No such user.")
        return

    if "babies" not in data[target_user] or not data[target_user]["babies"]:
        print(f"User '{target_user}' has no babies. Cannot set DOB.")
        return

    baby_list = list(data[target_user]["babies"].keys())
    print(f"Babies for user '{target_user}':")
    for i,bn in enumerate(baby_list, start=1):
        print(f"{i}) {bn}")
    c_str=input("Pick a baby number: ").strip()
    try:
        c=int(c_str)
        if c<1 or c>len(baby_list):
            print("Invalid choice.")
            return
    except ValueError:
        print("Invalid choice.")
        return

    bname=baby_list[c-1]
    ensure_new_format(data[target_user]["babies"], bname)

    dob_str=input(f"Enter baby's DOB (YYYY-MM-DD) for '{bname}' under user '{target_user}': ").strip()
    try:
        datetime.strptime(dob_str, "%Y-%m-%d")
    except ValueError:
        print("Invalid DOB format.")
        return

    data[target_user]["babies"][bname]["dob"] = dob_str
    save_data(data)
    print(f"DOB set for baby '{bname}' (User: {target_user}) to {dob_str}.")

# -------------------- Main Program --------------------
def main():
    print("PDF_ENABLED =", PDF_ENABLED)
    print("Using NumPy + pandas for analytics.\n")

    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE,'w') as f:
            json.dump({},f)

    data=load_data()

    if SUPERADMIN_USERNAME not in data:
        data[SUPERADMIN_USERNAME]={
            "password": SUPERADMIN_PASSWORD_HASH,
            "babies": {},
            "is_admin": True,
            "notification_interval":0
        }
        save_data(data)

    current_user=None
    is_superadmin=False
    is_admin=False

    while True:
        if current_user is None and not is_admin:
            print("\n=== BabyBalance (Not Logged In) ===")
            print("1) Register")
            print("2) Login")
            print("3) Exit")
            ch=input("Choice: ").strip()
            if ch=="1":
                register_user(data)
            elif ch=="2":
                user, su, adm = login_user(data)
                if user:
                    current_user=user
                    is_superadmin=su
                    is_admin=adm
            elif ch=="3":
                print("Goodbye!")
                break
            else:
                print("Invalid choice.")
        elif is_superadmin:
            maybe_show_notification(data, current_user)
            print("\n=== BabyBalance Superadmin ===")
            print("1) Create/Promote Admin")
            print("2) List all users")
            print("3) View user data")
            print("4) Edit user data")
            print("5) Delete user data entry")
            print("6) Delete entire user")
            print("7) Set Notification Interval")
            print("8) Logout")
            print("9) List Admins")
            print("10) Set Another User's Baby DOB")  # NEW option for superadmin
            c=input("Choice: ").strip()
            if c=="1":
                superadmin_create_new_admin(data)
            elif c=="2":
                admin_list_all_users(data)
            elif c=="3":
                admin_view_user_data(data)
            elif c=="4":
                admin_edit_data(data)
            elif c=="5":
                admin_delete_data(data)
            elif c=="6":
                admin_delete_user(data)
            elif c=="7":
                prompt_notification_interval(data, current_user)
            elif c=="8":
                print("Logging out superadmin.")
                stop_notifications()
                current_user=None
                is_superadmin=False
                is_admin=False
            elif c=="9":
                superadmin_list_admins(data)
            elif c=="10":
                superadmin_set_baby_dob(data)
            else:
                print("Invalid choice.")
        elif is_admin and not is_superadmin:
            maybe_show_notification(data, current_user)
            print("\n=== BabyBalance Admin ===")
            print("1) List all users")
            print("2) View user data")
            print("3) Edit user data")
            print("4) Delete user data entry")
            print("5) Delete entire user")
            print("6) Set Notification Interval")
            print("7) Logout admin")
            print("8) Set Another User's Baby DOB (if admin is allowed)")  # optional
            c=input("Choice: ").strip()
            if c=="1":
                admin_list_all_users(data)
            elif c=="2":
                admin_view_user_data(data)
            elif c=="3":
                admin_edit_data(data)
            elif c=="4":
                admin_delete_data(data)
            elif c=="5":
                admin_delete_user(data)
            elif c=="6":
                prompt_notification_interval(data, current_user)
            elif c=="7":
                print("Logging out admin.")
                stop_notifications()
                current_user=None
                is_superadmin=False
                is_admin=False
            elif c=="8":
                # if you want admins to set any user’s baby DOB:
                superadmin_set_baby_dob(data)
            else:
                print("Invalid choice.")
        else:
            # Normal user
            maybe_show_notification(data, current_user)
            print(f"\n=== BabyBalance (User: {current_user}) ===")
            print("1) Enter Baby Data")
            print("2) View Baby Data")
            print("3) Edit an Entry")
            print("4) Delete an Entry")
            print("5) View Monthly Calendar")
            print("6) Download Monthly Report")
            print("7) Advanced Analytics")
            print("8) Set Notification Interval")
            print("9) Logout")
            print("10) Set Baby DOB (for own baby)")
            c=input("Choice: ").strip()
            if c=="1":
                enter_baby_data(data, current_user)
            elif c=="2":
                view_baby_data(data, current_user)
            elif c=="3":
                edit_entry(data, current_user)
            elif c=="4":
                delete_entry(data, current_user)
            elif c=="5":
                view_month_calendar(data, current_user)
            elif c=="6":
                download_month_report(data, current_user)
            elif c=="7":
                advanced_analytics(data, current_user)
            elif c=="8":
                prompt_notification_interval(data, current_user)
            elif c=="9":
                print("Logging out.")
                stop_notifications()
                current_user=None
                is_superadmin=False
                is_admin=False
            elif c=="10":
                set_baby_dob(data, current_user)  # normal user => own baby
            else:
                print("Invalid choice.")

if __name__=="__main__":
    main()